apply plugin: 'com.android.library'

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionName project.version
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'jp.satorufujiwara:exoplayer-textureview:0.6.8'
    compile ('com.google.android.exoplayer:exoplayer:r1.5.9@aar'){
        exclude module: 'dexmaker'
        exclude module: 'dexmaker-mockito'
        exclude module: 'mockito-core'
    }
    compile 'com.google.android.gms:play-services-ads:8.4.0'
    compile 'com.google.ads.interactivemedia.v3:interactivemedia:3.2.1'
}

afterEvaluate {
    tasks.findByPath(":ima-player:androidJavadocs").enabled = false
}

android.libraryVariants.all { variant ->
    if (variant.buildType.isDebuggable()) {
        return; // Skip debug builds.
    }
    task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = System.getenv("ANDROID_HOME") + "/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
    }

    task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
        description "Bundles Javadoc into zip for $variant.name."
        classifier = "javadoc"
        from tasks["javadoc${variant.name.capitalize()}"]
    }
}

apply from: 'android-artifacts.gradle'
apply from: 'bintray-publish.gradle'
